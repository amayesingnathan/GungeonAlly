/*
Deployment script for EtGDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EtGDb"
:setvar DefaultFilePrefix "EtGDb"
:setvar DefaultDataPath "/var/opt/mssql/data/"
:setvar DefaultLogPath "/var/opt/mssql/data/"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[BaseItems]...';


GO
CREATE TABLE [dbo].[BaseItems] (
    [BaseID]        INT             NOT NULL,
    [Type]          INT             NOT NULL,
    [IconImageData] VARBINARY (MAX) NOT NULL,
    [ItemName]      NVARCHAR (MAX)  NOT NULL,
    [Quote]         NVARCHAR (MAX)  NOT NULL,
    [Quality]       INT             NOT NULL,
    [Description]   NVARCHAR (MAX)  NOT NULL,
    CONSTRAINT [PK_BaseItems] PRIMARY KEY CLUSTERED ([BaseID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Guns]...';


GO
CREATE TABLE [dbo].[Guns] (
    [BaseID]     INT            NOT NULL,
    [Notes]      NVARCHAR (MAX) NOT NULL,
    [GunType]    NVARCHAR (MAX) NOT NULL,
    [DPS]        NVARCHAR (MAX) NOT NULL,
    [MagSize]    NVARCHAR (MAX) NOT NULL,
    [AmmoCap]    NVARCHAR (MAX) NOT NULL,
    [Damage]     NVARCHAR (MAX) NOT NULL,
    [FireRate]   NVARCHAR (MAX) NOT NULL,
    [ReloadTime] NVARCHAR (MAX) NOT NULL,
    [ShotSpeed]  NVARCHAR (MAX) NOT NULL,
    [Range]      NVARCHAR (MAX) NOT NULL,
    [Force]      NVARCHAR (MAX) NOT NULL,
    [Spread]     NVARCHAR (MAX) NOT NULL,
    [Class]      NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_Guns] PRIMARY KEY CLUSTERED ([BaseID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Items]...';


GO
CREATE TABLE [dbo].[Items] (
    [BaseID]     INT            NOT NULL,
    [ItemEffect] NVARCHAR (MAX) NOT NULL,
    [ItemType]   NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_Items] PRIMARY KEY CLUSTERED ([BaseID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Synergies]...';


GO
CREATE TABLE [dbo].[Synergies] (
    [SynergyID] INT            NOT NULL,
    [Name]      NVARCHAR (MAX) NOT NULL,
    [Effect]    NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_Synergies] PRIMARY KEY CLUSTERED ([SynergyID] ASC)
);


GO
PRINT N'Creating Table [dbo].[SynergyDetail]...';


GO
CREATE TABLE [dbo].[SynergyDetail] (
    [SynergyID]   INT NOT NULL,
    [ItemID]      INT NOT NULL,
    [RequireType] INT NOT NULL
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Guns_BaseItems]...';


GO
ALTER TABLE [dbo].[Guns]
    ADD CONSTRAINT [FK_Guns_BaseItems] FOREIGN KEY ([BaseID]) REFERENCES [dbo].[BaseItems] ([BaseID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Items_BaseItems]...';


GO
ALTER TABLE [dbo].[Items]
    ADD CONSTRAINT [FK_Items_BaseItems] FOREIGN KEY ([BaseID]) REFERENCES [dbo].[BaseItems] ([BaseID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SynergyDetail_BaseItems]...';


GO
ALTER TABLE [dbo].[SynergyDetail]
    ADD CONSTRAINT [FK_SynergyDetail_BaseItems] FOREIGN KEY ([ItemID]) REFERENCES [dbo].[BaseItems] ([BaseID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SynergyDetail_Synergies]...';


GO
ALTER TABLE [dbo].[SynergyDetail]
    ADD CONSTRAINT [FK_SynergyDetail_Synergies] FOREIGN KEY ([SynergyID]) REFERENCES [dbo].[Synergies] ([SynergyID]);


GO
PRINT N'Creating Procedure [dbo].[spGetGunById]...';


GO
CREATE PROCEDURE [dbo].[spGetGunById]
	@GunId int
AS
	SELECT 
         bi.[BaseID]
        ,[Type]
        ,[IconImageData]
        ,[ItemName]
        ,[Quote]
        ,[Quality]
        ,[Description]
        ,[Notes]
        ,[GunType]
        ,[DPS]
        ,[MagSize]
        ,[AmmoCap]
        ,[Damage]
        ,[FireRate]
        ,[ReloadTime]
        ,[ShotSpeed]
        ,[Range]
        ,[Force]
        ,[Spread]
        ,[Class]
    FROM dbo.BaseItems bi
    INNER JOIN Guns g ON bi.BaseID=g.BaseID
    WHERE bi.BaseID=@GunId
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spGetGunByName]...';


GO
CREATE PROCEDURE [dbo].[spGetGunByName]
	@GunName nvarchar(max)
AS
	SELECT 
         bi.[BaseID]
        ,[Type]
        ,[IconImageData]
        ,[ItemName]
        ,[Quote]
        ,[Quality]
        ,[Description]
        ,[Notes]
        ,[GunType]
        ,[DPS]
        ,[MagSize]
        ,[AmmoCap]
        ,[Damage]
        ,[FireRate]
        ,[ReloadTime]
        ,[ShotSpeed]
        ,[Range]
        ,[Force]
        ,[Spread]
        ,[Class]
    FROM dbo.BaseItems bi
    INNER JOIN Guns g ON bi.BaseID=g.BaseID
    WHERE bi.ItemName=@GunName
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spGetItemById]...';


GO
CREATE PROCEDURE [dbo].[spGetItemById]
	@ItemId int
AS
	SELECT 
         bi.[BaseID]
        ,[Type]
        ,[IconImageData]
        ,[ItemName]
        ,[Quote]
        ,[Quality]
        ,[Description]
        ,[ItemEffect]
        ,[ItemType]
    FROM dbo.BaseItems bi
    INNER JOIN Items i ON bi.BaseID=i.BaseID
    WHERE bi.BaseID=@ItemId
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spGetItemByName]...';


GO
CREATE PROCEDURE [dbo].[spGetItemByName]
	@ItemName nvarchar(max)
AS
	SELECT 
         bi.[BaseID]
        ,[Type]
        ,[IconImageData]
        ,[ItemName]
        ,[Quote]
        ,[Quality]
        ,[Description]
        ,[ItemEffect]
        ,[ItemType]
    FROM dbo.BaseItems bi
    INNER JOIN Items i ON bi.BaseID=i.BaseID
    WHERE bi.ItemName=@ItemName
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spGetSynergies]...';


GO
CREATE PROCEDURE [dbo].[spGetSynergies]
	@ItemId int
AS
	select
        s.SynergyID, 
	    s.Name, 
	    s.Effect, 
	    sd.RequireType, 
	    bi.BaseID,
	    bi.Type,
	    bi.IconImageData,
	    bi.ItemName,
	    bi.Quote,
	    bi.Quality,
        bi.Description
    from
	    dbo.SynergyDetail sd
	    inner join dbo.Synergies s on s.SynergyID=sd.SynergyID		
	    inner join dbo.SynergyDetail osd on s.SynergyID=osd.SynergyID
	    inner join dbo.BaseItems bi on bi.BaseID=osd.ItemID
	    where sd.ItemID=@ItemId
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spInsertBaseItem]...';


GO
CREATE PROCEDURE [dbo].[spInsertBaseItem]
	@ID int, 
	@Type int, 
	@Image varbinary(max), 
	@Name nvarchar(max), 
	@Quote nvarchar(max), 
	@Quality int,
	@Description nvarchar(max)
AS
	insert into dbo.BaseItems
		(BaseID, Type, IconImageData, ItemName, Quote, Quality, Description)
	values
		(@ID, @Type, @Image, @Name, @Quote, @Quality, @Description); 
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spInsertGun]...';


GO
CREATE PROCEDURE [dbo].[spInsertGun]
	@ID int,
	@Notes nvarchar(max),
	@GunType nvarchar(max),
	@DPS nvarchar(max),
	@MagSize nvarchar(max),
	@AmmoCap nvarchar(max),
	@Damage nvarchar(max),
	@FireRate nvarchar(max),
	@ReloadTime nvarchar(max),
	@ShotSpeed nvarchar(max),
	@Range nvarchar(max),
	@Force nvarchar(max),
	@Spread nvarchar(max),
	@Class nvarchar(max)

AS
    insert into dbo.Guns
        (BaseID, Notes, GunType, DPS, MagSize, AmmoCap, Damage, FireRate, ReloadTime, ShotSpeed, Range, Force, Spread, Class)
    values
        (@ID, @Notes, @GunType, @DPS, @MagSize, @AmmoCap, @Damage, @FireRate, @ReloadTime, @ShotSpeed, @Range, @Force, @Spread, @Class);    
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spInsertItem]...';


GO
CREATE PROCEDURE [dbo].[spInsertItem]
	@ID int,
    @Effect nvarchar(max),
    @Type nvarchar(max)
AS
	insert into dbo.Items
        (BaseID, ItemEffect, ItemType)
    values
        (@ID, @Effect, @Type); 
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spInsertSynergy]...';


GO
CREATE PROCEDURE [dbo].[spInsertSynergy]
	@ID int,
	@Name nvarchar(max),
	@Effect nvarchar(max)
AS
    insert into dbo.Synergies
        (SynergyID, Name, Effect)
    values
        (@ID, @Name, @Effect);   
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spInsertSynergyDetail]...';


GO
CREATE PROCEDURE [dbo].[spInsertSynergyDetail]
	@SynergyID int,
	@ItemID int,
	@Type int
AS
    insert into dbo.SynergyDetail
        (SynergyID, ItemID, RequireType)
    values
        (@SynergyID, @ItemID, @Type);  
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spMatchItemName]...';


GO
CREATE PROCEDURE [dbo].[spMatchItemName]
	@Name nvarchar(max)
AS
	declare @SearchString nvarchar(max) = '%' + @Name + '%';
    declare @GoodMatch    nvarchar(max) = '%' + @Name;
    declare @BadMatch     nvarchar(max) = @Name + '%';

    select TOP 50 * from dbo.BaseItems
    where ItemName like @SearchString
    ORDER BY 
        CASE
            WHEN ItemName LIKE @GoodMatch THEN 1
            WHEN ItemName LIKE @BadMatch THEN 3
            ELSE 2
        END, ItemName
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spResetAllTables]...';


GO
CREATE PROCEDURE [dbo].[spResetAllTables]
AS
	truncate table dbo.Items;
    truncate table dbo.Guns;
    truncate table dbo.SynergyDetail;
    delete from dbo.Synergies;
    delete from dbo.BaseItems;
RETURN 0
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
