@inject InventoryState State

@{
    string cancelClass = Disabled ? "action-button disabled" : "action-button";
    <div class="@cancelClass" @onclick="InvokeOnClick" @onmouseover="OnStartHover" @onmouseout="OnEndHover">
        <div class="oi @Icon h1">
        </div>
    </div>

    bool hide = Content == null || !DisplayContent;
    <div>
        @if (!hide)
        {
            @Content
        }
    </div>
}

@code {

    [Inject]
    public IRefreshService RefreshService { get; set; }

    public enum TriggerType
    {
        None, OnClick, OnHover
    }

    [Parameter]
    public bool Disabled { get; set; } = true;

    [Parameter]
    public string Icon { get; set; } = string.Empty;

    [Parameter]
    public Func<Task>? OnClick { get; set; }

    [Parameter]
    public RenderFragment? Content { get; set; }

    [Parameter]
    public TriggerType ContentTriggerType { get; set; } = TriggerType.None;

    public bool DisplayContent { get; set; } = false;

    protected override void OnInitialized()
    {
        RefreshService.RefreshRequested += OnRefresh;
    }
    private async Task OnRefresh()
    {
        DisplayContent = false;
        await Task.CompletedTask;
    }

    private async Task InvokeOnClick()
    {
        if (ContentTriggerType == TriggerType.OnClick)
            DisplayContent = true;

        if (OnClick == null)
            return;

        await OnClick.Invoke();
    }

    private void OnStartHover()
    {
        if (ContentTriggerType == TriggerType.OnHover)
            DisplayContent = true;
    }

    private void OnEndHover()
    {
        if (ContentTriggerType == TriggerType.OnHover)
            DisplayContent = false;
    }
}
